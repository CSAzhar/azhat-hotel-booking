package com.azhar.hotel.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.azhar.hotel.dto.LoginRequest;
import com.azhar.hotel.dto.Response;
import com.azhar.hotel.dto.UserDTO;
import com.azhar.hotel.entity.Booking;
import com.azhar.hotel.entity.User;
import com.azhar.hotel.exception.OurException;
import com.azhar.hotel.repo.UserRepository;
import com.azhar.hotel.service.interf.IUserService;
import com.azhar.hotel.utils.JWTUtils;
import com.azhar.hotel.utils.Utils;


@Service
public class UserService implements IUserService{
	
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private JWTUtils jwtUtils;
	@Autowired
	private AuthenticationManager authenticationManager;

	@Override
	public Response register(User user) {

		Response response = new Response();
		try {
			
			if(user.getRole() == null || user.getRole().isBlank()) {
				user.setRole("USER");
			}
			if(userRepository.existsByEmail(user.getEmail())) {
				throw new OurException(user.getEmail()+" already exists");
			}
			user.setPassword(passwordEncoder.encode(user.getPassword()));
			User savedUser = userRepository.save(user);
			UserDTO userDTO = Utils.mapUserEntityToUserDto(savedUser);
			
			response.setStatusCode(200);
			response.setUser(userDTO);
			
			
		}catch(OurException e) {
			response.setStatusCode(400);
			response.setMessage(e.getMessage());
		}
		catch (Exception e) {
			response.setStatusCode(500);
			response.setMessage("Error Occured during Registration "+e.getMessage());
		}
		return response;
	}
	

	@Override
	public Response login(LoginRequest loginRequest) {
		Response response = new Response();
		try {
			authenticationManager.
							authenticate(new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword()));
			var user = userRepository.findByEmail(loginRequest.getEmail()).orElseThrow( () -> new OurException("user not found") );
			var token = jwtUtils.generateToken(user);
			response.setStatusCode(200);
			response.setToken(token);
			response.setRole(user.getRole());
			response.setExpirationTime("7 days");
			response.setMessage("successful");
			
		}catch (OurException e) {
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
		}catch (Exception e) {
			response.setStatusCode(500);
			response.setMessage("Error Occured during Loign "+e.getMessage());
		}
		return response;
	}
	
	@Override
	public Response getAllUsers() {
		Response response = new Response();
		try {
			
			List<User> userList = userRepository.findAll();
			List<UserDTO> userDtoList = Utils.mapUserListEntityToUserListDTO(userList);
			response.setUserList(userDtoList);
			response.setStatusCode(200);
			response.setMessage("successful");
			
		} catch (Exception e) {
			response.setStatusCode(500);
			response.setMessage("Error while getting all users "+e.getMessage());
		}
		return response;
	}

	@Override
	public Response getUserBookingHistory(String userId) {
		Response response = new Response();
		try {
			
			User user = userRepository.findById(Long.valueOf(userId)).orElseThrow( () -> new OurException("user not found") );
			UserDTO userDTO = Utils.mapUserEntityToUserDtoPlusUserBookingAndRoom(user);
			
			response.setStatusCode(200);
			response.setMessage("successful");
			response.setUser(userDTO);
			
			
		} catch (OurException e) {
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
			
		} catch (Exception e) {
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
		}
		return response;
	}

	@Override
	public Response deleteUser(String UserId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Response getUserById(String userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Response getMyInfo(String userId) {
		// TODO Auto-generated method stub
		return null;
	}


	

}
